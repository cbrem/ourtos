RTOS Design

4/13

Control Flow:
  * Scheduler runs and dispatches <= 1 task whenever timer interrupt fires.
  * Scheduler manipulates stack pointer ( :( ) before RTI to dispatch task
  * dispatching involves either:
    1. restoring a saved instance of the task
    2. calling a new instance of the task
  * Saving state:
    - scheduler isr saves all registers (including SP) from each task that
      enters it, so that it can restore them the next time that it schedules
      the task
    - NOTE: scheduler needs to save only "frame" for each task...because if
      it goes to schedule a task and sees that it is currently scheduled,
      it will just resume the task
  * tasks should note when they are finished running

State:
  * For each task, maintain:
    - frame (i.e. state that task put on stack before last timer interrupt)
    - next run
    - whether its frame is valid, or whether we should call a new instance

4/14

We should schedule and dispatch:
  1. on timer interrupt
  2. when we yield (via a SWI)

In schedule/dispatch function:
  * save frame for task which lead to the interrupt?
  * call scheduler, which returns ID of highest-priority task that is ready to run
  * if the task with this ID has running == True:
    - restore saved frame (i.e. set SP to point to frame, then RTI)
  * if running == False:
    - create a TEMPORARY frame (note: this is different than the frames that we'll
      save for tasks upon enterring the interrupts) that will:
        1. run the task
        2. set running = False for the task
        3. yield

Global Data:
  * one task struct for each task

typedef struct {
  - function pointer
  - frame saved last time that the task was interrupted
  - running
  - next time to run
  - enabled
  - normal priority
  - current priority
} task;

4/17

I/O:
  * one switch to enable/disable each task
  * one button to enable/disable mutexes

RTOS API:
  * void rtosEnableDebug(bool_t enable)
  * void rtosEnableMutexes(bool_t enable)
  * void rtosEnableTask(bool_t enable)
  * void rtosSetSchedulerPeriod(uint16_t period)
  * void rtosSetTaskArray(task_t[] tasks, uint8_t numTasks)
  * void rtosAddTask(uint8_t priority, uint16_t period, void (*task) (void))
  * void rtosAddMutex(uint8_t priority, mutex_t *mutex)
  * void rtosStart()
  * void rtosShutdown()
